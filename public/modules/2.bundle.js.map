{"version":3,"sources":["webpack:///./app/components/graph.js","webpack:///./app/components/sentence_header.js","webpack:///./app/components/sentences.js","webpack:///./app/components/spiel.js"],"names":["__webpack_require__","_reactForceGraph","_reactDatGui","_reactBurgerMenu","count","Graph","_this2","this","_classCallCheck","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","resize","window","location","reload","componentDidMount","regeneratorRuntime","mark","_callee","wrap","_context","prev","next","addEventListener","setState","openSide","loading","stop","handleUpdate","data","_handleClick","node","distance","distRatio","Math","hypot","x","y","z","fg","cameraPosition","updateGraph","scene","_this$state$data","state","combinedQuery","NodeDensity","EdgeDensity","filterType","degreeRange","edgeDensityDegrees","axios","get","then","theseNodes","nodes","JSON","parse","isMenuOpen","isOpen","_handleLinkClick","link","nextScene","source","id","target","sentences","edges","name","_handleLinkHover","prevLink","init","maxNodeWeight","package","Sections","React","Component","removeEventListener","event","preventDefault","_this3","_react2","default","createElement","slide","pageWrapId","outerContainerId","width","onStateChange","_spiel2","_sentence_header2","ForceGraph3D","ref","el","graphData","linkWidth","onLinkClick","onLinkHover","onNodeClick","nodeThreeObject","sprite","SpriteText","textHeight","weight","_reactDatGui2","onUpdate","DatSelect","path","label","options","DatNumber","min","max","step","DatButton","onClick","props","message","length","_sentences2","map","sentence","content","_react","href"],"mappings":"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","file":"./modules/2.bundle.js","sourcesContent":["import React from 'react'\nimport { ForceGraph3D } from 'react-force-graph';\nimport axios from 'axios'\nimport SpriteText from 'three-spritetext';\nimport 'react-dat-gui/build/react-dat-gui.css';\nimport DatGui, { DatFolder, DatSelect, DatBoolean, DatColor, DatNumber, DatString, DatButton } from 'react-dat-gui';\nimport { slide as Menu } from 'react-burger-menu'\nimport Spiel from './spiel'\nimport SentenceHeader from './sentence_header'\nimport init from './init.json'\nimport Media from 'react-media'\n\nlet count = 0;  \n\nexport default class Graph extends React.Component {\n\n  constructor(){\n    super()\n\n    this.state = {\n      nodes : init,\n      resize: false,\n      maxNodeWeight : 22078,\n      loading: 'RENDER',\n      openSide : true,\n      scene : 'opening',\n      sentences: [],\n      edges: [],\n      data: {\n        filterType: 'Absolute density',\n        package: 'react-dat-gui',\n        Sections: 'Science of Logic',\n        NodeDensity: 3000,\n        EdgeDensity: 50,\n        edgeDensityDegrees : 3,\n        degreeRange: 30\n      }\n    }\n  }\n\n  resize = () => {\n\n    window.location.reload()\n  }\n\n  componentDidMount = async () => {\n\n    window.addEventListener(\"resize\", ()=> {this.resize()});\n\n    this.setState({\n        openSide: true,\n        loading: 'RENDER'\n      })\n\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\");\n  }\n\n  handleUpdate = data => this.setState({ data })\n\n  _handleClick = (node, distance) => {\n\n          // Aim at node from outside it\n        \n          \n          const distRatio = 1 + distance/Math.hypot(node.x, node.y, node.z);\n          this.fg.cameraPosition(\n            { x: node.x * distRatio, y: node.y * distRatio, z: node.z * distRatio }, // new position\n            node, // lookAt ({ x, y, z })\n            500  // ms transition duration\n          );\n  };\n  \n  updateGraph = (scene) => {\n\n    let { NodeDensity, EdgeDensity, filterType, degreeRange, edgeDensityDegrees } = this.state.data\n\n    let combinedQuery = `?NodeDensity=${NodeDensity}&EdgeDensity=${EdgeDensity}&filterType=${filterType}&degreeRange=${degreeRange}&edgeDensityDegrees=${edgeDensityDegrees}`\n\n    axios.get(`/api/hegel/data/${combinedQuery}`).then(theseNodes => \n\n      this.setState({\n        nodes : JSON.parse(theseNodes.data),\n        openSide: scene,\n        loading: 'RENDER'\n      })\n\n      )\n\n    this.setState({\n        loading: '...loading'\n      })\n  }\n\n  showSettings (event) {\n    event.preventDefault();\n  }\n\n  isMenuOpen = (state) => {\n\n    if(count === 1){\n      \n      const node = {\n        x: 6.380699007330318,\n        y: -7.6215317598632595,\n        z: -3.8883653785341386\n      }\n\n      this._handleClick(node, 200)\n    }\n\n    count++\n\n\n\n    this.setState({\n      openSide : state.isOpen\n    })\n\n  };\n\n  _handleLinkClick = (link) => {\n\n    let nextScene\n\n    this.state.scene = 'opening' ? nextScene = 'first' : nextScene = 'main'\n\n    let combinedQuery = `?source=${link.source.id}&target=${link.target.id}`\n\n    axios.get(`/api/hegel/data/sentences/${combinedQuery}`).then(sentences => \n\n      this.setState({\n        sentences : JSON.parse(sentences.data),\n        openSide: true,\n        scene: nextScene,\n        loading: 'RENDER',\n        edges: [link.source.name, link.target.name]\n      })\n\n      )\n\n    this.setState({\n        loading: '...loading'\n      })\n\n  }\n\n  _handleLinkHover = (link, prevLink) => {\n\n    if(link === null){\n      prevLink.name = ''\n    }\n    else{\n      link.name = link.source.name + \" => \" + link.target.name\n    }\n\n  }\n\n  render () {\n    \n    return (\n\n      <div id=\"App\">\n          <Menu pageWrapId={\"page-wrap\"} \n                outerContainerId={\"App\"}\n                width={ '50%' }\n                isOpen={ this.state.openSide }\n                onStateChange={ this.isMenuOpen }\n          >\n            { this.state.scene === 'opening'  ? <Spiel /> : <SentenceHeader sentences={this.state.sentences} edges={this.state.edges} /> }\n            \n          </Menu>\n        \n        <div id=\"page-wrap\">\n\n          { this.state.nodes ? <ForceGraph3D\n                                resize={this.state.resize}\n                                ref={el => { this.fg = el; }}\n                                graphData={this.state.nodes}\n                                linkWidth={.5}\n                                onLinkClick={this._handleLinkClick}\n                                onLinkHover={this._handleLinkHover}\n                                onNodeClick={(node) =>{this._handleClick(node, 40)}}\n                                nodeThreeObject={node => {\n                                 \n                                  const sprite = new SpriteText(node.name);\n                                  sprite.textHeight = 15 * (node.weight / this.state.maxNodeWeight);\n                                  return sprite;\n                                }}\n                                \n                              /> : 'LOADING' }\n\n              <DatGui data={this.state.data} onUpdate={this.handleUpdate} >\n                <DatSelect path='filterType' label=\"Node Filter\" options={['Absolute density', 'Relative density']} /> \n                <DatNumber path='NodeDensity' label='Node Density' min={300} max={10000} step={1} />\n                <DatSelect path='edgeDensityDegrees' label=\"Edge Degrees\" options={['1', '2', '3']} /> \n                <DatNumber path='degreeRange' label='Degree Range' min={1} max={100} step={1} />\n                <DatNumber path='EdgeDensity' label='Edge Density' min={1} max={150} step={1} />\n                <DatButton label={this.state.loading} onClick={()=> this.state.loading === 'RENDER' ? this.updateGraph(false) : ''  } />\n              </DatGui>\n       \n\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport Sentences from './sentences'\n\nexport default function SentenceHeader( props ){\n\n    let message = \"Displaying \" + props.sentences.length + ' passages that contain \"' + props.edges[0] + '\" and \"' + props.edges[1] +'\"'\n\n\treturn (\n            <div>\n            <h1> {message} </h1>\n            <br />\n            <Sentences sentences={props.sentences} />\n            </div>\n        )\n        \n\t\n}","import React from 'react'\n\nexport default function Sentences( props ){\n\n\treturn (\n            props.sentences.map((sentence) => {\n            return (                 \n                    <ul>\n                    {sentence.content}\n                    <br />\n                    Density: {sentence.weight}\n                    </ul>\n               \n            )})\n        \n        )\n        \n\t\n}","import React from 'react'\n\nexport default function spiel(){\n\n      return (\n\n            <div>\n            <i>\n            \n            <span> This project renders concepts within a text as a graph. The present example is GWF Hegel's Science of Logic </span> <br /><br />\n            <span> See <a href='https://www.youtube.com/watch?v=sPflAhvZgrU'> presentation </a> </span> <br /><br />\n            <span> Node's refer to concepts, edges refer to connections between concepts in use.  </span> <br /><br />\n            <span> Nodes can be filtered either absolutely (by frequency) or relatively (the frequency of their edge pairs). </span> <br /><br />\n            <span> Edges can be filtered by weight (frequency). </span> <br /><br />\n            <span> Edge weights can be measured in up to three degrees </span> <br /><br />\n            <span> Click on an edge to query the passages that contain that edge pair, sorted by the relative importance of the passage </span>\n            </i>\n        </div>\n      )\n}"],"sourceRoot":""}