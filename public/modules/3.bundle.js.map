{"version":3,"sources":["webpack:///./app/components/graph_mobile.js","webpack:///./app/components/sentence_header.js","webpack:///./app/components/sentences.js","webpack:///./app/components/spiel_mobile.js"],"names":["__webpack_require__","_reactForceGraph","_reactBurgerMenu","count","Graph","_this2","this","_classCallCheck","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","resize","window","location","reload","componentDidMount","regeneratorRuntime","mark","_callee","wrap","_context","prev","next","addEventListener","setState","nodes","init","openSide","loading","stop","handleUpdate","data","_handleClick","node","distance","distRatio","Math","hypot","x","y","z","fg","cameraPosition","updateGraph","scene","_this$state$data","state","combinedQuery","NodeDensity","EdgeDensity","filterType","degreeRange","edgeDensityDegrees","axios","get","then","theseNodes","JSON","parse","isMenuOpen","console","log","isOpen","_handleLinkClick","link","nextScene","source","id","target","sentences","edges","name","_handleLinkHover","prevLink","closeSpiel","maxNodeWeight","package","Sections","React","Component","removeEventListener","event","preventDefault","_this3","_react2","default","createElement","slide","pageWrapId","outerContainerId","width","onStateChange","_spiel_mobile2","onClick","ForceGraph3D","ref","el","graphData","linkWidth","onLinkClick","onLinkHover","onNodeClick","nodeThreeObject","sprite","SpriteText","textHeight","weight","props","message","length","_sentences2","map","sentence","content","_react","href"],"mappings":"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","file":"./modules/3.bundle.js","sourcesContent":["import React from 'react'\nimport { ForceGraph3D } from 'react-force-graph';\nimport axios from 'axios'\nimport SpriteText from 'three-spritetext';\nimport 'react-dat-gui/build/react-dat-gui.css';\nimport DatGui, { DatFolder, DatSelect, DatBoolean, DatColor, DatNumber, DatString, DatButton } from 'react-dat-gui';\nimport { slide as Menu } from 'react-burger-menu'\nimport Spiel from './spiel_mobile'\nimport SentenceHeader from './sentence_header'\nimport init from './init.json'\nimport Media from 'react-media'\n\nlet count = 0;  \n\nexport default class Graph extends React.Component {\n\n  constructor(){\n    super()\n\n    this.state = {\n      resize: false,\n      maxNodeWeight : 22078,\n      loading: 'RENDER',\n      openSide : true,\n      scene : 'opening',\n      sentences: [],\n      edges: [],\n      data: {\n        filterType: 'Absolute density',\n        package: 'react-dat-gui',\n        Sections: 'Science of Logic',\n        NodeDensity: 3000,\n        EdgeDensity: 50,\n        edgeDensityDegrees : 3,\n        degreeRange: 30\n      }\n    }\n  }\n\n  resize = () => {\n\n    window.location.reload()\n  }\n\n  componentDidMount = async () => {\n\n    window.addEventListener(\"resize\", ()=> {this.resize()});\n\n    this.setState({\n        nodes : init,\n        openSide: true,\n        loading: 'RENDER'\n      })\n\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\");\n  }\n\n  handleUpdate = data => this.setState({ data })\n\n  _handleClick = (node, distance) => {\n\n          // Aim at node from outside it\n        \n          \n          const distRatio = 1 + distance/Math.hypot(node.x, node.y, node.z);\n          this.fg.cameraPosition(\n            { x: node.x * distRatio, y: node.y * distRatio, z: node.z * distRatio }, // new position\n            node, // lookAt ({ x, y, z })\n            500  // ms transition duration\n          );\n  };\n  \n  updateGraph = (scene) => {\n\n    let { NodeDensity, EdgeDensity, filterType, degreeRange, edgeDensityDegrees } = this.state.data\n\n    let combinedQuery = `?NodeDensity=${NodeDensity}&EdgeDensity=${EdgeDensity}&filterType=${filterType}&degreeRange=${degreeRange}&edgeDensityDegrees=${edgeDensityDegrees}`\n\n    axios.get(`/api/hegel/data/${combinedQuery}`).then(theseNodes => \n\n      this.setState({\n        nodes : JSON.parse(theseNodes.data),\n        openSide: scene,\n        loading: 'RENDER'\n      })\n\n      )\n\n    this.setState({\n        loading: '...loading'\n      })\n  }\n\n  showSettings (event) {\n    event.preventDefault();\n  }\n\n  isMenuOpen = (state) => {\n\n    console.log('state ', state)\n\n    if(count === 1){\n      \n      const node = {\n        x: 6.380699007330318,\n        y: -7.6215317598632595,\n        z: -3.8883653785341386\n      }\n\n      this._handleClick(node, 200)\n    }\n\n    count++\n\n\n\n    this.setState({\n      openSide : state.isOpen\n    })\n\n  };\n\n  _handleLinkClick = (link) => {\n\n    let nextScene\n\n    this.state.scene = 'opening' ? nextScene = 'first' : nextScene = 'main'\n\n    let combinedQuery = `?source=${link.source.id}&target=${link.target.id}`\n\n    axios.get(`/api/hegel/data/sentences/${combinedQuery}`).then(sentences => \n\n      this.setState({\n        sentences : JSON.parse(sentences.data),\n        openSide: true,\n        scene: nextScene,\n        loading: 'RENDER',\n        edges: [link.source.name, link.target.name]\n      })\n\n      )\n\n    this.setState({\n        loading: '...loading'\n      })\n\n  }\n\n  _handleLinkHover = (link, prevLink) => {\n\n    if(link === null){\n      prevLink.name = ''\n    }\n    else{\n      link.name = link.source.name + \" => \" + link.target.name\n    }\n\n  }\n\n  closeSpiel = (state) => {\n  \n    this.setState({\n      scene : 'closed'\n    })\n    this.isMenuOpen(state)\n  }\n\n  render () {\n    \n    return (\n      <div id=\"App\">\n\n          <Menu pageWrapId={\"page-wrap\"} \n                outerContainerId={\"App\"}\n                width={ '70%' }\n                isOpen={ this.state.openSide }\n                onStateChange={ this.isMenuOpen }\n          >\n            { this.state.scene === 'opening'  ? <Spiel  onClick={() => this.closeSpiel({isOpen:false}) }/>  : ''}\n            \n          </Menu>\n        \n        <div id=\"page-wrap\">\n\n          { this.state.nodes ? <ForceGraph3D\n                                ref={el => { this.fg = el; }}\n                                graphData={this.state.nodes}\n                                linkWidth={.5}\n                                onLinkClick={this._handleLinkClick}\n                                onLinkHover={this._handleLinkHover}\n                                onNodeClick={(node) =>{this._handleClick(node, 40)}}\n                                nodeThreeObject={node => {\n                                 \n                                  const sprite = new SpriteText(node.name);\n                                  sprite.textHeight = 15 * (node.weight / this.state.maxNodeWeight);\n                                  return sprite;\n                                }}\n                                \n                              /> : 'LOADING' }\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport Sentences from './sentences'\n\nexport default function SentenceHeader( props ){\n\n    let message = \"Displaying \" + props.sentences.length + ' passages that contain \"' + props.edges[0] + '\" and \"' + props.edges[1] +'\"'\n\n\treturn (\n            <div>\n            <h1> {message} </h1>\n            <br />\n            <Sentences sentences={props.sentences} />\n            </div>\n        )\n        \n\t\n}","import React from 'react'\n\nexport default function Sentences( props ){\n\n\treturn (\n            props.sentences.map((sentence) => {\n            return (                 \n                    <ul>\n                    {sentence.content}\n                    <br />\n                    Density: {sentence.weight}\n                    </ul>\n               \n            )})\n        \n        )\n        \n\t\n}","import React from 'react'\n\nexport default function spiel(props){\n\n    console.log(props)\n\n\treturn (\n\n\t\t<div id='mobileSpiel' onClick={props.onClick}>\n            <i>\n\n            <span> <h1> ***Note- for a full version of the web app, please view on a desktop browser*** </h1> </span> \n            <span> <h1> This project renders concepts within a text as a graph. The present example is GWF Hegel's Science of Logic </h1> </span> \n            <span> <h1> Node's refer to concepts, edges refer to connections between concepts in use.  </h1> </span> \n            <span> <h1> See <a href='https://www.youtube.com/watch?v=sPflAhvZgrU'> presentation </a> </h1> </span> \n            </i>\n        </div>\n\t)\n}"],"sourceRoot":""}